const express = require("express");
const app = express();
app.use(express.json());
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");
const dbPath = path.join(__dirname, "cricketTeam.db");
let db = null;

const initiliseDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("server is running at port 3000");
    });
  } catch (e) {
    console.log(e);
  }
};

initiliseDbAndServer();

//get players api

app.get("/players/", async (request, response) => {
  const sqlQuery = `
    SELECT 
    *
    FROM
    cricket_team
    ORDER BY
    player_id;
    `;
  const players = await db.all(sqlQuery);
  response.send(players);
});

//post player api

app.post("/players/", async (request, response) => {
  const body = request.body;
  const { playerName, jerseyNumber, role } = body;
  const sqlQuery = `
    INSERT INTO
    cricket_team
    (playerName, jerseyNumber, role)
    VALUES
    ('${playerName}', ${jerseyNumber}, '${role}');
    `;
  try {
    const dbResponse = await db.run(sqlQuery);
    const playerId = dbResponse.lastID;
    response.send({ playerId: playerId });
  } catch (e) {
    response.send(e);
  }
});

//get specific player

app.get("/players/:playerId/", async (request, response) => {
  const { playerId } = request.params;
  const sqlQuery = `
    SELECT 
    *
    FROM 
    cricket_team
    WHERE 
    player_id=${playerId};`;
  const player = await db.get(sqlQuery);
  response.send(player);
});

//update the player api

app.put("players/:playerId", async (request, response) => {
  const { playerId } = request.params;
  const { playerName, jerseyNumber, role } = request.body;
  const sqlQuery = `
  UPDATE 
  cricket_team
  SET 
  '${playerName}', ${jerseyNumber}, '${role}';
    `;
  await db.run(sqlQuery);
  response.send("Player Details Updated");
});

//delete player api

app.delete("/players/:playerId", async (request, response) => {
  const { playerId } = request.params;
  const sqlQuery = `
     DELETE FROM
     cricket_team
     WHERE
     player_id=${playerId};`;
  await db.run(sqlQuery);
  response.send("Player Removed");
});

module.exports = app;




_________________________________________________________________________________________________________________________



const express = require("express");
const app = express();
app.use(express.json());
const path = require("path");
const db_path = path.join(__dirname, "moviesData.db");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
let db = null;
const initiliseServerAndDb = async () => {
  db = await open({
    filename: db_path,
    driver: sqlite3.Database,
  });

  app.listen(3000),
    () => {
      console.log("server is started at http://localhost:3000");
    };
};
initiliseServerAndDb();

//get all data api
app.get("/movies/", async (request, response) => {
  const sqlQuery = `
    select 
    *
    from
    movie;`;
  const sqlresponse = await db.all(sqlQuery);
  response.send(sqlresponse);
});

//post the data api
app.post("/movies/", async (request, response) => {
  const postData = request.body;
  const { directorId, movieName, leadActor } = postData;
  const sqlQuery = `
    INSERT INTO
    movie
    (directorId,movieName,leadActor)
    VALUES 
    (${directorId},'${movieName}','${leadActor}');
  `;
  const sqlResponse = await db.run(sqlQuery);
  const movie_id = sqlResponse.lastID;
  response.send(movie_id);
});

// get a specific movie
app.get("/movies/:movieId/", async (request, response) => {
  const { movieId } = request.params;
  const sqlQuery = `
  SELECT 
  * 
  FROM
  movie 
  WHERE 
  movie_id=${movieId};`;
  const sqlResponse = await db.get(sqlQuery);
  response.send(sqlResponse);
});

//put api
app.put("/movies/:movieId/", async (request, response) => {
  const { movieId } = request.params;
  const bodyData = request.body;
  const { directorId, movieName, leadActor } = bodyData;
  const sqlQuery = `
    UPDATE
    movie
    SET
    directorId=${directorId},movieName='${movieName}',leadActor='${leadActor}')
    WHERE 
     movie_id=${movieId};
    `;
  await db.run(sqlQuery);
  response.send("Movie Details Updated");
});

//delete movie api
app.delete("movies/movieId", async (request, response) => {
  const { movieId } = request.params;
  const sqlQuery = `
    DELETE FROM
    movie
    WHERE
    movieId=${movieId};`;
  await db.run(sqlQuery);
  response.send("Movie Removed");
});

//get api
app.get("/directors/", async (request, response) => {
  const sqlQuery = `
    SELECT 
    *
    FROM
    director;`;
  const sqlResponse = await db.all(sqlQuery);
  response.send(sqlResponse);
});

//get api
app.get("/directors/:directorId/movies/", async (request, response) => {
  const { directorId, movies } = request.params;
  const sqlQuery = `
        SELECT 
        '${movies}'
        FROM 
        movie 
        WHERE 
        director_id=${directorId};`;
  const sqlResponse = await db.all(sqlQuery);
  response.send(sqlResponse);
});

module.exports = app;

